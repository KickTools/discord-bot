// Example API response structure
{
    "success": true,
    "data": {
        "username": "user123",
        "email": "user@example.com",
        "licenseKey": "XXXX-XXXX-XXXX",
        "nickname": "Cool User",
        "status": "active",
        "createdAt": "2024-02-12T00:00:00Z",
        "lastLogin": "2024-02-12T00:00:00Z"
    }
}

// Error response structure
{
    "success": false,
    "error": {
        "code": "NOT_FOUND",
        "message": "Customer not found"
    }
}


I'll help you set up the API endpoints and role-based permissions, and then provide a summary.

Let's first modify the config file to use your API URL:



```javascript
// src/config/config.js
require('dotenv').config();

module.exports = {
    discord: {
        token: process.env.DISCORD_TOKEN,
        // Add allowed roles (you'll put the role IDs here)
        allowedRoles: ['role_id_1', 'role_id_2']
    },
    api: {
        baseUrl: 'https://api.kicktools.app/discord',
        endpoints: {
            username: '/customers/username/',
            license: '/customers/license/',
            email: '/customers/email/'
        }
    }
};

```

For your API endpoints, here's the recommended data structure to return:

```javascript
// Example API response structure
{
    "success": true,
    "data": {
        "username": "user123",
        "email": "user@example.com",
        "licenseKey": "XXXX-XXXX-XXXX",
        "nickname": "Cool User",
        "status": "active",
        "createdAt": "2024-02-12T00:00:00Z",
        "lastLogin": "2024-02-12T00:00:00Z"
    }
}

// Error response structure
{
    "success": false,
    "error": {
        "code": "NOT_FOUND",
        "message": "Customer not found"
    }
}
```

Now, let's modify the customer command to include role checks:

```javascript
// src/commands/customer.js
const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const apiService = require('../services/apiService');
const config = require('../config/config');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('customer')
        .setDescription('Retrieve customer information')
        .setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers) // Optional: Adds base Discord permission requirement
        .addStringOption(option =>
            option.setName('username')
                .setDescription('Customer username')
                .setRequired(false))
        .addStringOption(option =>
            option.setName('license')
                .setDescription('Customer license key')
                .setRequired(false))
        .addStringOption(option =>
            option.setName('email')
                .setDescription('Customer email address')
                .setRequired(false)),

    async execute(interaction) {
        // Check if user has required role
        const hasRequiredRole = interaction.member.roles.cache
            .some(role => config.discord.allowedRoles.includes(role.id));

        if (!hasRequiredRole) {
            await interaction.reply({
                content: 'You do not have permission to use this command.',
                ephemeral: true
            });
            return;
        }

        await interaction.deferReply({ ephemeral: true }); // Make responses private

        const username = interaction.options.getString('username');
        const license = interaction.options.getString('license');
        const email = interaction.options.getString('email');

        try {
            let customerData;

            if (username) {
                customerData = await apiService.getCustomerByUsername(username);
            } else if (license) {
                customerData = await apiService.getCustomerByLicense(license);
            } else if (email) {
                customerData = await apiService.getCustomerByEmail(email);
            } else {
                await interaction.editReply('Please provide either a username, license key, or email address.');
                return;
            }

            const embed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle('Customer Information')
                .addFields(
                    { name: 'Username', value: customerData.data.username || 'N/A', inline: true },
                    { name: 'Email', value: customerData.data.email || 'N/A', inline: true },
                    { name: 'License Key', value: customerData.data.licenseKey || 'N/A', inline: true },
                    { name: 'Nickname', value: customerData.data.nickname || 'N/A', inline: true },
                    { name: 'Status', value: customerData.data.status || 'N/A', inline: true },
                    { name: 'Created At', value: new Date(customerData.data.createdAt).toLocaleDateString() || 'N/A', inline: true },
                    { name: 'Last Login', value: new Date(customerData.data.lastLogin).toLocaleDateString() || 'N/A', inline: true }
                )
                .setTimestamp();

            await interaction.editReply({ embeds: [embed] });
        } catch (error) {
            await interaction.editReply(`Error: ${error.message}`);
        }
    },
};

```

Now, here's a summary of what each file does in the project:

1. **Project Structure:**
```
discord_bot/
├── src/
│   ├── commands/          # Contains all bot commands
│   ├── config/           # Configuration files
│   ├── services/         # API and other services
│   ├── utils/            # Utility functions
│   └── index.js          # Main bot file
├── .env                  # Environment variables
└── package.json         # Project dependencies
```

2. **File Purposes:**

- `src/index.js`: 
  - Main bot file
  - Sets up Discord client
  - Handles command loading
  - Manages event listeners

- `src/config/config.js`:
  - Stores configuration settings
  - API endpoints
  - Allowed roles
  - Bot token management

- `src/commands/customer.js`:
  - Defines the /customer command
  - Handles role permissions
  - Processes user input
  - Formats and sends responses

- `src/services/apiService.js`:
  - Manages API calls
  - Handles API responses
  - Error handling for API requests

- `src/utils/errorHandler.js`:
  - Standardizes error handling
  - Converts API errors to user-friendly messages

- `deploy-commands.js`:
  - Registers slash commands with Discord
  - Must be run when commands change

3. **Setup Steps:**
```bash
# 1. Install dependencies
npm install discord.js dotenv axios

# 2. Create .env file with:
DISCORD_TOKEN=your_discord_token_here
CLIENT_ID=your_client_id_here

# 3. Deploy commands
npm run deploy

# 4. Start the bot
npm start
```

4. **Role Management:**
- Add role IDs to config.js
- Bot checks user roles before executing commands
- Responses are ephemeral (only visible to command user)

5. **API Integration:**
- Base URL: https://api.kicktools.app/discord
- Endpoints for username, license, and email lookups
- Standardized response format
- Error handling included

Would you like me to explain any part in more detail or help you set up anything specific?